#!/bin/sh

source_url() (
  echo http://www.haskell.org/ghc/dist/$1/ghc-$1-src.tar.bz2
)

binary_url() (
  case $_hsenv_private_host_os in
    linux)
      echo http://www.haskell.org/ghc/dist/$1/ghc-$1-x86_64-unknown-linux-deb7.tar.bz2
      return
      ;;
    darwin*)
      echo http://www.haskell.org/ghc/dist/$1/ghc-$1-x86_64-apple-darwin.tar.bz2
      return
      ;;
    mingw64)
      echo http://www.haskell.org/ghc/dist/$1/ghc-$1-x86_64-unknown-mingw32.tar.bz2
      return
      ;;
    mingw*)
      echo http://www.haskell.org/ghc/dist/$1/ghc-$1-i386-unknown-mingw32.tar.bz2
      return
      ;;
  esac
)

url_basename() (
  echo $1 | sed 's/#.*//' | sed 's/\?.*//' | sed 's%.*/%%'
)

url_to_cache_name() (
  echo $1 | sed 's,/,%2F,g' | sed 's/:/%3A/g' | sed 's/;/%3B/g' | sed 's/\./%2E/g'
)

has_command() (
  which $1 > /dev/null 2> /dev/null
)

downloader() (
  url=$1
  file=$2
  mkdir -p $_hsenv_private_cache_dir
  cache_file=$_hsenv_private_cache_dir/`url_to_cache_name $url`
  if [ -e $cache_file ]; then
    cp $cache_file $file
    return
  fi

  downloading_cache_file=$cache_file.downloading
  rm -f $downloading_cache_file

  if has_command curl; then
    downloader_curl $url $downloading_cache_file
  elif has_command wget; then
    downloader_wget $url $downloading_cache_file
  elif has_command fetch; then
    downloader_fetch $url $downloading_cache_file
  elif has_command lwp-download; then
    downloader_lwp_download $url $downloading_cache_file
  else
    echo "curl/wget/fetch/lwp-download required"
    return 1
  fi

  download_result=$?
  if [ $download_result -ne 0 ]; then
    return $download_result
  fi

  mv $downloading_cache_file $cache_file && cp $cache_file $file
)

downloader_curl() (
  curl --fail --output $2 $1
)

downloader_wget() (
  wget --output-document=$2 $1
)

downloader_fetch() (
  fetch -o $2 $1
)

downloader_lwp_download() (
  lwp-download $1 $2
)
