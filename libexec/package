#!/bin/sh

dependency_to_package_name() (
  dependency_to_package_name_and_space_and_version $1 | awk '{print $1}'
)

dependency_to_package_version() (
  dependency_to_package_name_and_space_and_version $1 | awk '{print $2}'
)

dependency_to_package_name_and_version() (
  dependency_to_package_name_and_space_and_version $1 | awk '{if ($2) { print $1"-"$2} else { print $1 }}'
)

dependency_to_package_name_and_space_and_version() (
  $NAWK 'BEGIN {
    dep = ARGV[1]
    sub(/^builtin_/, "", dep)
    len = split(dep, dep_words, "-")
    printf dep_words[1]
    if (len == 1) {
      exit
    }
    for (a = 2; a <= len; a++) {
      dep_word = dep_words[a]
      if (match(dep_word, /^[0-9]+(\.[0-9]+)*$/)) {
        printf " " dep_word
        exit
      } else {
        printf "-" dep_word
      }
    }
  }' $1
)

dependencies_to_package_name_and_version() (
  if [ $1 = "depends:" ]; then
    shift
  fi
  output=
  for dep in $*; do
    output="$output `dependency_to_package_name_and_version $dep`"
  done
  echo $output
)

max_package_version() (
  sort_package_version $* | tail -1
)

min_package_version() (
  sort_package_version $* | head -1
)

ghc_pkg_version() (
  echo $1 | sed 's/^.* //'
)

sort_package_version() (
  $NAWK '
    function is_version(str) {
      return match(str, /^[0-9]+(\.[0-9]+)*$/)
    }

    function compare_version(left, right,    i, left_values_length, right_values_length) {
      left_values_length = split(left, left_values, ".")
      right_values_length = split(right, right_values, ".")
      for (i = 1; ; i++) {
        if (left_values_length < i && right_values_length < i) {
          return 0
        } else if (left_values_length < i) {
          return -1
        } else if (right_values_length < i) {
          return 1
        } else if (left_values[i] + 0 < right_values[i] + 0) {
          return -1
        } else if (left_values[i] + 0 > right_values[i] + 0) {
          return 1
        }
      }
    }

    BEGIN {
      versions_length = 0
      for (i = 1; i <= ARGC; i++) {
        if (is_version(ARGV[i])) {
          versions_length++
          versions[versions_length] = ARGV[i]
        }
      }
      if (versions_length == 0) {
        exit
      } else if (versions_length == 1) {
        print versions[1]
        exit
      }
      ordered = 1
      do {
        ordered = 1
        for (i = 1; i < versions_length; i++) {
          if (compare_version(versions[i], versions[i + 1]) > 0) {
            ordered = 0
            swap = versions[i]
            versions[i] = versions[i + 1]
            versions[i + 1] = swap
          }
        }
      } while (!ordered)
      for (i = 1; i <= versions_length; i++) {
        print versions[i]
      }
    }' $*
)

right_is_newer_version() (
  right=$1
  left=$2
  if [ $right = $left ] || [ `max_package_version $right $left` = $left ]; then
    return 1
  fi
  return 0
)
