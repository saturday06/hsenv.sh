#!/bin/sh

. $HSENV_LIBEXEC_DIR/init

transplant_local_executable() (
  if ! has_command ghc ; then
    hsenv_abort Error: ghc is required.
  fi

  hsenv_install_package_db=$HSENV_INSTALL_ROOT/package.conf.d
  hsenv_info Initializing GHC Package database at $hsenv_install_package_db
  version_output=`ghc-pkg --version`
  version=`ghc_pkg_version "$version_output"`
  if ! is_version $version; then
    hsenv_abort Couldn\'t extract ghc-pkg version number from: $version_output
  fi
  mkdir -p $HSENV_INSTALL_ROOT
  move_log_to_install_dir
  if [ `max_package_version 6.10.4 $version` = 6.10.4 ]; then
    hsenv_debug Detected GHC older than 6.12, initializing GHC_PACKAGE_PATH to file with '[]'
    echo "[]" > $hsenv_install_package_db
  else
    ghc-pkg init $hsenv_install_package_db
  fi

  hsenv_info Copying necessary packages from original GHC package database

  for package in base Cabal; do
    if ! transplant_max_version_dependencies $package; then
      hsenv_abort failed
    fi
  done

  for package in haskell98 haskell2010 ghc ghc-binary; do
    if ! transplant_max_version_dependencies $package; then
      hsenv_debug "  => Ignored"
    fi
  done

  posterior_dir=$HSENV_INSTALL_ROOT/posterior
  mkdir -p $posterior_dir
  for bin in alex ar ffihugs gcc greencard happy hmake hscolour \
             hugs jhc ld lhc lhc-pkg nhc98 pkg-config ranlib \
             strip tar uhc; do
    abs_bin=`which $bin 2> /dev/null`
    if [ -n "$abs_bin" ]; then
      ln -s $abs_bin $posterior_dir/$bin
    fi
  done

  cp -fr $HSENV_SKELTON_DIR/ghc $HSENV_INSTALL_ROOT/
  for bin in c2hs cpphs haddock hpc hsc2hs; do
    abs_bin=`which $bin 2> /dev/null`
    if [ -n "$abs_bin" ]; then
      ln -s $abs_bin $HSENV_INSTALL_ROOT/ghc/bin/$bin
    fi
  done

  install_helper_scripts
)

transplant_max_version_dependencies() (
  package=$1
  hsenv_debug "Checking if \`$package' is already installed."
  if ! ghc-pkg describe $package > /dev/null 2> /dev/null; then
    hsenv_debug "It's not."
    return 1
  fi
  hsenv_debug "It is."

  hsenv_debug Checking the highest installed version of package $package
  versions=`ghc-pkg field $package version`
  version=`max_package_version $versions`
  if [ -z "$version" ]; then
    hsenv_abort "Couldn't extract version string from: $versions"
  fi
  hsenv_debug Found: $version
  package=$package-$version
  transplant_dependencies $package
)

transplant_dependencies() (
  package=$1
  if GHC_PACKAGE_PATH=$hsenv_install_package_db ghc-pkg --no-user-package-conf describe $package > /dev/null 2> /dev/null; then
    return
  fi
  depends=`ghc-pkg field $package depends`
  for dep in `dependencies_to_package_name_and_version $depends`; do
    transplant_dependencies $dep
  done
  hsenv_debug "Copying package \`$dep' to Virtual Haskell Environment."
  ghc-pkg describe $package | GHC_PACKAGE_PATH=$hsenv_install_package_db ghc-pkg register - | hsenv_debug -
)

filter_install() (
  CABAL_DIR=$HSENV_INSTALL_ROOT/cabal
  HACKAGE_CACHE=$HSENV_INSTALL_ROOT/cabal/packages
  mkdir -p $CABAL_DIR $HACKAGE_CACHE
  if is_mingw; then
    CABAL_DIR=`cd $CABAL_DIR && $COMSPEC /c cd | tr '\\\\' /`
    HACKAGE_CACHE=`cd $HACKAGE_CACHE && $COMSPEC /c cd | tr '\\\\' /`
    PATH_SEPARATOR=";"
  else
    PATH_SEPARATOR=:
  fi
  cat $1 \
    | sed "s|<HSENV>|$HSENV_WORK_DIR|g" \
    | sed "s|<HSENV_DIR>|$HSENV_INSTALL_ROOT|g" \
    | sed "s|<HSENV_NAME>|$HSENV_NAME|g" \
    | sed "s|<MODIFY_PS1>|$HSENV_PS1_INDICATOR|g" \
    | sed "s|<HACKAGE_CACHE>|$HACKAGE_CACHE|g" \
    | sed "s|<CABAL_DIR>|$CABAL_DIR|g" \
    | sed "s|<CABAL_CONFIG>|$CABAL_DIR/config|g" \
    | sed "s|<GHC_PACKAGE_PATH>|$hsenv_install_package_db|g" \
    | sed "s|<PATH_SEPARATOR>|$PATH_SEPARATOR|g" \
    > $2
)

install_helper_scripts() (
  prior_bin=$HSENV_INSTALL_ROOT/prior
  posterior_bin=$HSENV_INSTALL_ROOT/posterior
  default_bin=$HSENV_INSTALL_ROOT/bin
  cabal_bin=$HSENV_INSTALL_ROOT/cabal/bin

  mkdir -p $prior_bin $posterior_bin $default_bin $cabal_bin
  filter_install $HSENV_SKELTON_DIR/bin/activate $default_bin/activate
  echo $hsenv_install_package_db | tr -d '\r\n' > $HSENV_INSTALL_ROOT/ghc_package_path_var
  path_var_prependix=$prior_bin:$cabal_bin:$HSENV_INSTALL_ROOT/ghc/bin
  if is_mingw ; then
    path_var_prependix=$path_var_prependix:$HSENV_INSTALL_ROOT/ghc/mingw/bin
  fi
  if $HSENV_BOOTSTRAP_CABAL ; then
    path_var_prependix=$path_var_prependix:$HSENV_INSTALL_ROOT/cabal/bootstrap/bin
  fi
  path_var_prependix=$path_var_prependix:$posterior_bin
  if $HSENV_BOOTSTRAP_CABAL ; then
    install_bootstrap_cabal
  fi
  filter_install $HSENV_SKELTON_DIR/cabal_config $HSENV_INSTALL_ROOT/cabal/config
  filter_install $HSENV_SKELTON_DIR/cabal $prior_bin/cabal
  chmod u+x $prior_bin/cabal
  echo $path_var_prependix | tr -d '\r\n' > $HSENV_INSTALL_ROOT/path_var_prependix

  hsenv_info
  hsenv_info To activate the new environment use \`source `basename $HSENV_INSTALL_ROOT`/bin/activate\'
)

install_bootstrap_cabal_mingw_archive() (
  version=$1
  hsenv_info Install: cabal-install-$version
  tmp_dir=$bootstrap_dir/tmp
  mkdir -p $tmp_dir
  url=http://www.haskell.org/cabal/release/cabal-install-$version/cabal-$version-i386-unknown-mingw32.tar.gz
  file=$tmp_dir/`url_basename $url`
  if ! downloader $url $file; then
    return 1
  fi
  extract_archive $file $bootstrap_dir/bin
)

install_bootstrap_cabal_mingw() (
  lib_version=$1
  case `min_package_version $lib_version 1.20.0.2` in
    1.20.*)
      install_bootstrap_cabal_mingw_archive 1.20.0.3
      return $?
      ;;
    1.18.*)
      version=1.18.0.3
      ;;
    1.16.*|1.14.*)
      version=0.14.0
      ;;
    *)
      hsenv_warn Not supported version
      return 1
      ;;
  esac
  hsenv_info Install: cabal-install-$version
  downloader http://www.haskell.org/cabal/release/cabal-install-$version/cabal.exe $bootstrap_dir/bin/cabal.exe
)

install_bootstrap_cabal() (
  bootstrap_dir=$HSENV_INSTALL_ROOT/cabal/bootstrap
  mkdir -p $bootstrap_dir/bin
  lib_versions=`GHC_PACKAGE_PATH=$hsenv_install_package_db $HSENV_INSTALL_ROOT/ghc/bin/ghc-pkg field Cabal version`
  lib_version=`max_package_version $lib_versions`
  if [ -z "$lib_version" ]; then
    hsenv_warn Cabal package not found.
    return 1
  fi

  hsenv_info Found: Cabal-$lib_version
  if is_mingw; then
    install_bootstrap_cabal_mingw $lib_version
    return $?
  fi
  case `min_package_version $lib_version 1.20.0.2` in
    1.20.*)
      version=1.20.0.3
      ;;
    1.18.*)
      version=1.18.0.5
      ;;
    1.16.*)
      version=1.16.0.2
      ;;
    1.14.*)
      version=0.14.0
      ;;
    *)
      hsenv_warn Not supported version
      return 1
      ;;
  esac

  hsenv_info Install: cabal-install-$version

  cabal_install_package_db=$bootstrap_dir/package.conf.d
  hsenv_debug Bootstrap package db: $cabal_install_package_db
  ghc_version_output=`GHC_PACKAGE_PATH=$hsenv_install_package_db $HSENV_INSTALL_ROOT/ghc/bin/ghc-pkg --version`
  ghc_version=`ghc_pkg_version "$ghc_version_output"`
  if ! is_version $ghc_version; then
    hsenv_warn Couldn\'t extract ghc-pkg version number from: $ghc_version_output
    exit 1
  fi
  if [ `max_package_version 6.10.4 $ghc_version` = 6.10.4 ]; then
    hsenv_debug Detected GHC older than 6.12, initializing GHC_PACKAGE_PATH to file with '[]'
    echo "[]" > $cabal_install_package_db
  else
    GHC_PACKAGE_PATH=$hsenv_install_package_db $HSENV_INSTALL_ROOT/ghc/bin/ghc-pkg init $cabal_install_package_db
  fi

  url=https://hackage.haskell.org/package/cabal-install-$version/cabal-install-$version.tar.gz
  cabal_install_archive=$HSENV_INSTALL_ROOT/cache/`url_basename $url`
  cabal_install_extracted=$HSENV_INSTALL_ROOT/tmp/cabal_bootstrap
  mkdir -p $HSENV_INSTALL_ROOT/cache $cabal_install_extracted
  downloader $url $cabal_install_archive \
    && extract_archive $cabal_install_archive $cabal_install_extracted \
    && cd $cabal_install_extracted \
    && chmod u+x bootstrap.sh \
    && CURL=\\curl \
       EXTRA_CONFIGURE_OPTS="--package-db=$cabal_install_package_db" \
       PREFIX=$bootstrap_dir \
       PATH=$path_var_prependix:$PATH \
       ./bootstrap.sh --global
)

install_remote_url() (
  url=$1
  hsenv_info URL=$url
  cache_dir=$HSENV_INSTALL_ROOT/cache
  file=$cache_dir/`url_basename $url`
  mkdir -p $cache_dir
  move_log_to_install_dir
  if ! downloader $url $file ; then
    hsenv_abort Failed
  fi
  install_local $file
)

install_remote_source() (
  hsenv_info GHC version=$HSENV_GHC
  install_remote_url `source_url $HSENV_GHC`
)

install_remote() (
  install_remote_url $HSENV_GHC
)

install_local() (
  file=$1
  if [ ! -f $file ]; then
    hsenv_abort Not found
  fi
  srcdir=$HSENV_INSTALL_ROOT/src
  mkdir -p $HSENV_INSTALL_ROOT/ghc
  move_log_to_install_dir
  (extract_archive $file $srcdir) && \
    cd $srcdir && \
    if [ -f configure ]; then \
      ./configure --prefix=$HSENV_INSTALL_ROOT/ghc && \
      ($MAKE || true) && \
      $MAKE install
    else
      cp -fr . $HSENV_INSTALL_ROOT/ghc
    fi

  if [ $? -ne 0 ]; then
    hsenv_abort Failed
  fi
  hsenv_install_package_db=`$HSENV_INSTALL_ROOT/ghc/bin/ghc --print-global-package-db | tr '\\\\' /`
  if [ -z "$hsenv_install_package_db" ]; then
    hsenv_abort Failed
  fi

  install_helper_scripts
)

if [ -e "$HSENV_INSTALL_ROOT" ]; then
  hsenv_abort There is already `basename $HSENV_INSTALL_ROOT` directory at $HSENV_WORK_DIR
fi

hsenv_info Install to $HSENV_INSTALL_ROOT
install_method=`installation_of $HSENV_GHC`
hsenv_debug Using \`$install_method\' method
$install_method
