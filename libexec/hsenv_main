#!/bin/sh

. $_hsenv_private_libexec_dir/init

hsenv_work_dir=`pwd`
if [ -z "$HSENV_NAME" ]; then
  hsenv_install_root=$hsenv_work_dir/.hsenv
else
  hsenv_install_root=$hsenv_work_dir/.hsenv_$HSENV_NAME
fi

if [ -e "$hsenv_install_root" ]; then
  echo There is already `basename $hsenv_install_root` directory at $hsenv_work_dir
  exit 1
fi

echo Install to $hsenv_install_root
install_method=`installation_of $HSENV_GHC`
echo Using \`$install_method\'

transplant_local_executable() (
  if ! has_command ghc ; then
    echo error: ghc is required.
    exit 1
  fi
  mkdir -p $hsenv_install_root

  hsenv_install_package_db=$hsenv_install_root/package.conf.d
  echo Initializing GHC Package database at $hsenv_install_package_db
  version_output=`ghc-pkg --version`
  version=`echo $version_output | sed 's/^.\+ //'`
  if ! is_version $version; then
    echo Couldn\'t extract ghc-pkg version number from: $version_output
    exit 1
  fi
  if [ `max_package_version "6.10.4 $version"` = 6.10.4 ]; then
    echo Detected GHC older than 6.12, initializing GHC_PACKAGE_PATH to file with '[]'
    echo "[]" > $hsenv_install_package_db
  else
    ghc-pkg init $hsenv_install_package_db
  fi

  echo Copying necessary packages from original GHC package database

  for package in base Cabal; do
    if ! transplant_max_version_dependencies $package; then
      echo Oops!
      exit 1
    fi
  done

  for package in haskell98 haskell2010 ghc ghc-binary; do
    if ! transplant_max_version_dependencies $package; then
      echo "  => Ignored"
    fi
  done

  posterior_dir=$hsenv_install_root/posterior
  mkdir -p $posterior_dir
  for bin in alex ar ffihugs gcc greencard happy hmake hscolour \
             hugs jhc ld lhc lhc-pkg nhc98 pkg-config ranlib \
             strip tar uhc; do
    abs_bin=`which $bin 2> /dev/null`
    if [ -n "$abs_bin" ]; then
      ln -s $abs_bin $posterior_dir/$bin
    fi
  done

  cp -fr $_hsenv_private_root_dir/skelton/ghc $hsenv_install_root/
  for bin in c2hs cpphs haddock hpc hsc2hs; do
    abs_bin=`which $bin 2> /dev/null`
    if [ -n "$abs_bin" ]; then
      ln -s $abs_bin $hsenv_install_root/ghc/bin/$bin
    fi
  done

  install_helper_scripts
)

transplant_max_version_dependencies() (
  package=$1
  if ! ghc-pkg describe $package > /dev/null 2> /dev/null; then
    echo Package \`$package\' not found
    return 1
  fi
  echo Checking the highest installed version of package $package
  versions=`ghc-pkg field $package version`
  version=`max_package_version $versions`
  if [ -n "$version" ]; then
    echo Found: $version
    package=$package-$version
  else
    echo Not found
  fi
  transplant_dependencies $package
)

transplant_dependencies() (
  package=$1
  if GHC_PACKAGE_PATH=$hsenv_install_package_db ghc-pkg --no-user-package-conf describe $package > /dev/null 2> /dev/null; then
    return
  fi
  depends=`ghc-pkg field $package depends`
  for dep in `dependencies_to_package_name_and_version $depends`; do
    transplant_dependencies $dep
  done
  echo "Copying package \`$dep' to Virtual Haskell Environment."
  ghc-pkg describe $package | GHC_PACKAGE_PATH=$hsenv_install_package_db ghc-pkg register -
)

filter_install() (
  cat $1 \
    | sed "s;<HSENV>;${hsenv_work_dir};g" \
    | sed "s;<HSENV_DIR>;${hsenv_install_root};g" \
    | sed "s;<HSENV_NAME>;${HSENV_NAME};g" \
    | sed "s;<MODIFY_PS1>;${HSENV_PS1_INDICATOR};g" \
    | sed "s;<HACKAGE_CACHE>;${hsenv_install_root}/cabal/packages;g" \
    | sed "s;<CABAL_DIR>;${hsenv_install_root}/cabal;g" \
    | sed "s;<CABAL_CONFIG>;${hsenv_install_root}/cabal/config;g" \
    | sed "s;<GHC_PACKAGE_PATH>;${hsenv_install_package_db};g" \
    > $2
)

install_helper_scripts() (
  prior_bin=$hsenv_install_root/prior
  posterior_bin=$hsenv_install_root/posterior
  default_bin=$hsenv_install_root/bin
  cabal_bin=$hsenv_install_root/cabal/bin

  mkdir -p $prior_bin $posterior_bin $default_bin $cabal_bin
  filter_install $_hsenv_private_root_dir/skelton/bin/activate $default_bin/activate
  chmod u+x $prior_bin/cabal
  echo $hsenv_install_package_db | tr -d '\r\n' > $hsenv_install_root/ghc_package_path_var
  path_var_prependix=$prior_bin:$cabal_bin:$hsenv_install_root/ghc/bin
  if $HSENV_BOOTSTRAP_CABAL ; then
    path_var_prependix=$path_var_prependix:$hsenv_install_root/cabal/bootstrap/bin
  fi
  path_var_prependix=$path_var_prependix:$posterior_bin
  if $HSENV_BOOTSTRAP_CABAL ; then
    install_bootstrap_cabal
  fi
  filter_install $_hsenv_private_root_dir/skelton/cabal_config $hsenv_install_root/cabal/config
  filter_install $_hsenv_private_root_dir/skelton/cabal $prior_bin/cabal
  echo $path_var_prependix | tr -d '\r\n' > $hsenv_install_root/path_var_prependix

  echo
  echo To activate the new environment use \`source $hsenv_install_root/bin/activate\'
)

install_bootstrap_cabal_mingw_archive() (
  version=$1
  tmp_dir=$bootstrap_dir/tmp
  mkdir -p $tmp_dir
  url=http://www.haskell.org/cabal/release/cabal-install-$version/cabal-$version-i386-unknown-mingw32.tar.gz
  file=$tmp_dir/`url_basename $url`
  if ! downloader $url $file; then
    return 1
  fi
  extract_archive $file $bootstrap_dir/bin
)

install_bootstrap_cabal_mingw() (
  lib_version=$1
  case $lib_version in
    1.20.*)
      install_bootstrap_cabal_mingw_archive 1.20.0.3
      return $?
      ;;
    1.18.*)
      version=1.18.0.3
      ;;
    1.16.*|1.14.*)
      version=0.14.0
      ;;
    *)
      echo not supported version
      return 1
      ;;
  esac
  downloader http://www.haskell.org/cabal/release/cabal-install-$version/cabal.exe $bootstrap_dir/bin/cabal.exe
)

install_bootstrap_cabal() (
  bootstrap_dir=$hsenv_install_root/cabal/bootstrap
  mkdir -p $bootstrap_dir/bin
  lib_versions=`GHC_PACKAGE_PATH=$hsenv_install_package_db $hsenv_install_root/ghc/bin/ghc-pkg field Cabal version`
  lib_version=`max_package_version $lib_versions`
  if [ -z "$lib_version" ]; then
    echo Cabal package not found.
    return 1
  fi

  echo Found: Cabal-$lib_version
  if is_mingw; then
    install_bootstrap_cabal_mingw $lib_version
    return $?
  fi
  case $lib_version in
    1.20.*)
      version=1.20.0.3
      ;;
    1.18.*)
      version=1.18.0.5
      ;;
    1.16.*)
      version=1.16.0.2
      ;;
    1.14.*)
      version=0.14.0
      ;;
    *)
      echo not supported version
      return 1
      ;;
  esac

  echo => cabal-install-$version

  cabal_install_package_db=$bootstrap_dir/package.conf.d
  echo cabal bootstrap package db: $cabal_install_package_db
  ghc_version_output=`GHC_PACKAGE_PATH=$hsenv_install_package_db $hsenv_install_root/ghc/bin/ghc-pkg --version`
  ghc_version=`echo $ghc_version_output | sed 's/^.\+ //'`
  if ! is_version $ghc_version; then
    echo Couldn\'t extract ghc-pkg version number from: $ghc_version_output
    exit 1
  fi
  if [ `max_package_version "6.10.4 $ghc_version"` = 6.10.4 ]; then
    echo Detected GHC older than 6.12, initializing GHC_PACKAGE_PATH to file with '[]'
    echo "[]" > $cabal_install_package_db
  else
    GHC_PACKAGE_PATH=$hsenv_install_package_db $hsenv_install_root/ghc/bin/ghc-pkg init $cabal_install_package_db
  fi

  url=https://hackage.haskell.org/package/cabal-install-$version/cabal-install-$version.tar.gz
  cabal_install_archive=$hsenv_install_root/cache/`url_basename $url`
  cabal_install_extracted=$hsenv_install_root/tmp/cabal_bootstrap
  mkdir -p $hsenv_install_root/cache $cabal_install_extracted
  downloader $url $cabal_install_archive \
    && extract_archive $cabal_install_archive $cabal_install_extracted \
    && cd $cabal_install_extracted \
    && chmod u+x bootstrap.sh \
    && CURL=\\curl \
       EXTRA_CONFIGURE_OPTS="--package-db=$cabal_install_package_db" \
       PREFIX=$bootstrap_dir \
       PATH=$path_var_prependix:$PATH \
       ./bootstrap.sh --global
)

install_remote_url() (
  url=$1
  echo URL=$url
  cache_dir=$hsenv_install_root/cache
  file=$cache_dir/`url_basename $url`
  mkdir -p $cache_dir
  if ! downloader $url $file ; then
    echo Oops!
    exit 1
  fi
  install_local_file $file
)

install_remote_source() (
  echo GHC version=$HSENV_GHC
  install_remote_url `source_url $HSENV_GHC`
)

install_remote_binary() (
  install_remote_url $HSENV_GHC
)

install_local_binary() (
  install_local_file $HSENV_GHC
)

install_local_file() (
  file=$1
  if [ ! -f $file ]; then
    echo ... not found
    exit 1
  fi
  srcdir=$hsenv_install_root/src
  mkdir -p $hsenv_install_root/ghc
  (extract_archive $file $srcdir) && \
    cd $srcdir && \
    if [ -f configure ]; then \
      ./configure --prefix=$hsenv_install_root/ghc && \
      ($HSENV_MAKE_COMMAND || true) && \
      $HSENV_MAKE_COMMAND install
    else
      cp -fr . $hsenv_install_root/ghc
    fi

  if [ $? -ne 0 ]; then
    echo Oops!
    exit 1
  fi
  hsenv_install_package_db=`$hsenv_install_root/ghc/bin/ghc --print-global-package-db | tr \\\\ /`
  if [ -z "$hsenv_install_package_db" ]; then
    echo Oops!
    exit 1
  fi

  install_helper_scripts
)

$install_method
