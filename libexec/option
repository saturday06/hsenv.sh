#!/bin/sh

read_option() { # No subshell
  export HSENV_GHC=
  export HSENV_NAME=
  export HSENV_LOG_LEVEL=3
  export HSENV_PS1_INDICATOR=true
  export HSENV_SANITY_CHECK=true
  export HSENV_SHARE_CABAL_CACHE=true
  if [ -z "$HSENV_COMMAND" ]; then
    export HSENV_COMMAND=$HSENV_LIBEXEC_DIR/hsenv_main
  fi
  if has_command cabal; then
    export HSENV_BOOTSTRAP_CABAL=false
  else
    export HSENV_BOOTSTRAP_CABAL=true
  fi

  for parsed_option in $*; do
    case $parsed_option in
      --ghc=*)
        HSENV_GHC=${parsed_option#*=}
        shift
        ;;
      --name=*)
        HSENV_NAME=${parsed_option#*=}
        shift
        ;;
      -v|--verbose)
        [ $HSENV_LOG_LEVEL -lt 4 ] && HSENV_LOG_LEVEL=4
        shift
        ;;
      --very-verbose)
        [ $HSENV_LOG_LEVEL -lt 5 ] && HSENV_LOG_LEVEL=5
        shift
        ;;
      --version)
        HSENV_COMMAND=$HSENV_LIBEXEC_DIR/hsenv_version
        return
        ;;
      -h|--help)
        HSENV_COMMAND=$HSENV_LIBEXEC_DIR/hsenv_help
        return
        ;;
      --dont-share-cabal-cache)
        HSENV_SHARE_CABAL_CACHE=false
        shift
        ;;
      --make-cmd=*)
        HSENV_MAKE=${parsed_option#*=}
        shift
        ;;
      --tar-cmd=*)
        HSENV_TAR=${parsed_option#*=}
        shift
        ;;
      --no-ps1-indicator)
        HSENV_PS1_INDICATOR=false
        shift
        ;;
      --skip-sanity-check)
        HSENV_SANITY_CHECK=false
        shift
        ;;
      --bootstrap-cabal)
        HSENV_BOOTSTRAP_CABAL=true
        shift
        ;;
      *)
        hsenv_abort Error: unknown option \`$parsed_option\'
        ;;
    esac
  done

  if [ -z "$HSENV_NAME" ]; then
    export HSENV_INSTALL_ROOT=$HSENV_WORK_DIR/.hsenv
  else
    export HSENV_INSTALL_ROOT=$HSENV_WORK_DIR/.hsenv_$HSENV_NAME
  fi
}

is_version() (
  echo $* | $HSENV_EGREP "^[0-9]+(\.[0-9]+)*$" > /dev/null
)

is_url() (
  echo $* | $HSENV_EGREP "^https?://.+$" > /dev/null
)

installation_of() (
  if [ -z "$1" ]; then
    echo install_with_no_version
  elif is_version $1; then
    echo install_with_version
  elif is_url $1; then
    echo install_remote
  else
    echo install_local
  fi
)

has_command() (
  which $1 > /dev/null 2> /dev/null
)

if [ -z "$HSENV_PV" ]; then
  export HSENV_PV=cat
  if has_command pv; then
    HSENV_PV_AND_CLEANUP() (
      pv 2>&$HSENV_RAW_STDERR
      pv_result=$?
      if [ -t $HSENV_RAW_STDERR ]; then
        $HSENV_NAWK 'BEGIN { printf("%c[F%c[K", 27, 27) }' >&$HSENV_RAW_STDERR
      fi
      return $pv_result
    )
    export HSENV_PV=HSENV_PV_AND_CLEANUP
  fi
fi

if [ -z "$HSENV_EGREP" ]; then
  if echo "foo" | grep -E "^foo?$" > /dev/null 2> /dev/null; then
    HSENV_GREP_E() (
      grep -E "$@"
    )
    export HSENV_EGREP=HSENV_GREP_E
  elif has_command egrep; then
    export HSENV_EGREP=egrep
  else
    echo "error: \`grep -E' or \`egrep' required"
    exit 1
  fi
fi

if [ -z "$HSENV_NAWK" ]; then
  if awk 'BEGIN{sub(/foo/, "")}' 2> /dev/null; then
    export HSENV_NAWK=awk
  elif has_command nawk; then
    export HSENV_NAWK=nawk
  else
    echo "error: \`nawk' required"
    exit 1
  fi
fi

is_gnu_make() (
  if ! has_command $1; then
    return 1
  fi
  (cd $HSENV_LIBEXEC_DIR/gnumakechecker && $1) > /dev/null 2> /dev/null
)

if [ -z "$HSENV_MAKE" ]; then
  export HSENV_MAKE=make
  if ! is_gnu_make $HSENV_MAKE && is_gnu_make gmake; then
    export HSENV_MAKE=gmake
  fi
fi

if [ -z "$HSENV_TAR" ]; then
  export HSENV_TAR=tar
  if has_command gtar; then
    export HSENV_TAR=gtar
  fi
fi
